#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@date: 2010-06-07
@author: shell.xu
@license: GPL-3

Copyright (C) 2012 Shell Xu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
 any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@comment:

This program can translate all kind of package to standard comic package, jpeg image format, zip package. It support rar, zip, 7z, and support 7z file in rar file.

这个程序是用于将各种格式的压缩文件转换为标准的压缩文件，zip压缩，jpeg格式。支持的格式有rar，zip，7z。包括压缩包内嵌套7z。

'''
import os, sys, pipes, shutil, getopt, zipfile, tempfile
from os import path

compress_ext = set(['.zip', '.rar', '.7z'])

def up_one_level(pth):
    ''' up contain if just have one entry in directory '''
    lpth = os.listdir(pth)
    if len(lpth) != 1: return
    downlevel = path.join(pth, lpth[0])
    tmp_up = path.join(path.dirname(pth), 'tmp')
    os.rename(downlevel, tmp_up)
    os.rmdir(pth)
    os.rename(tmp_up, pth)

def rar_decmp(src, tgt):
    os.chdir(tgt)
    os.system('unrar x %s' % pipes.quote(src))
    up_one_level(tgt)

def lzip_decmp(src, tgt):
    os.chdir(tgt)
    os.system('7z x %s' % pipes.quote(src))
    up_one_level(tgt)

def zip_decmp(src, tgt):
    os.chdir(tgt)
    os.system('unzip %s' % pipes.quote(src))
    up_one_level(tgt)

def decompress(src, tgt):
    ext = path.splitext(src)[1].lower()
    filemap = {'.zip': zip_decmp, '.rar': rar_decmp, '.7z': lzip_decmp}
    try: return filemap[ext](src, tgt)
    except KeyError: raise Exception('unknown source format %s' % ext)

def compress_to_dir(filepath):
    dirname, ext = path.splitext(filepath)
    assert ext, 'compress file without extname'
    try: os.mkdir(dirname)
    except OSError: pass
    decompress(filepath, dirname)
    os.remove(filepath)

def zip_cmp(src, tgt):
    with zipfile.ZipFile(tgt, 'w', zipfile.ZIP_DEFLATED) as tgtfile:
        for base, dirs, files in os.walk(src):
            for f in files:
                tgtpath = path.join(base, f)
                tgtfile.write(tgtpath, tgtpath[len(src)+1:])

def pic_to_jpg(pth):
    ''' translate all file under path to jpeg format if can '''
    os.chdir(pth)
    cmd = "find %s -type f ! -name '*.jpg' -o -name '*.jpeg' | parallel -j %d 'convert {} {.}.jpg; rm {}'" % (
        pipes.quote(pth), int(optdict.get('-j')))
    os.system(cmd)
    print 'process done.\r\n'

# try use recursion
def trans_lz(filepath):
    cur_path = os.getcwd()
    fullpath = path.abspath(filepath)
    tmp = tempfile.mkdtemp(dir='/tmp/' if '-c' not in optdict else cur_path)
    try:
        decompress(fullpath, tmp)
        for base, dirs, files in os.walk(tmp):
            for f in files:
                if path.splitext(f)[1].lower() in compress_ext:
                    compress_to_dir(path.join(base, f))
        pic_to_jpg(tmp)
        zip_cmp(tmp, '%s-new.zip' % path.splitext(fullpath)[0])
    finally:
        if '-f' not in optdict: shutil.rmtree(tmp)
    os.chdir(cur_path)

def main():
    '''v1.0
    usage: 7zptocmx [-h] [-f] [-l] filename
    -c: don't use /tmp as temp base
    -f: not free temp directory
    -j: smp process
    -h: help
    '''
    global optdict
    optlist, args = getopt.getopt(sys.argv[1:], 'cfj:h')
    optdict = dict(optlist)
    if '-h' in optdict or not args:
        print main.__doc__
        return

    optdict.setdefault('-j', '4')
    for arg in args: trans_lz(arg)

if __name__ == '__main__': main()
