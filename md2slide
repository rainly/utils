#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@date: 2012-09-11
@author: shell.xu
@license: MIT

Copyright (C) 2012 Shell Xu <shell909090@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
   
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
   
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@comment:

This program is used to translate markdown file to html5 slide. It is based on [reveal](https://github.com/hakimel/reveal.js). This program is followed upstream, source is released by MIT lisence, please check source code for more infomation.

程序可以将markdown文档转换为html5的演示文档。程序基于[reveal](https://github.com/hakimel/reveal.js)项目完成。项目遵从上游，以MIT授权发布。具体情况请阅读源码。

需要事先安装: markdown: stable 1.0.1
    Text-to-HTML conversion tool
    http://daringfireball.net/projects/markdown/

'''
import os, re, sys, base64, pprint, getopt, subprocess
from mako.template import Template
from BeautifulSoup import BeautifulSoup
from os import path

# http://cdn.bootcss.com/reveal.js/2.6.2
# DEFAULT_CDN = 'http://xuzhixiang.u.qiniudn.com/reveal/2.6.2'
# DEFAULT_CDN = 'http://77g5rc.com1.z0.glb.clouddn.com/reveal/2.6.2'
DEFAULT_CDN = 'http://cdn.staticfile.org/reveal.js/2.6.2'

basehtml='''
PCFkb2N0eXBlIGh0bWw+ICAKPGh0bWwgbGFuZz0iZW4iPgogIDxoZWFkPgogICAgPHRpdGxlPiR7
dGl0bGV9PC90aXRsZT4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVu
dD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2Jp
bGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiIC8+CiAgICA8bWV0YSBuYW1lPSJhcHBs
ZS1tb2JpbGUtd2ViLWFwcC1zdGF0dXMtYmFyLXN0eWxlIiBjb250ZW50PSJibGFjay10cmFuc2x1
Y2VudCIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgCiAgICAgICAgaHJlZj0iJHtiYXNl
fS9jc3MvcmV2ZWFsLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIAogICAgICAgIGhy
ZWY9IiR7YmFzZX0vY3NzL3RoZW1lL2RlZmF1bHQuY3NzIiBpZD0idGhlbWUiPgogICAgPCEtLSBG
b3Igc3ludGF4IGhpZ2hsaWdodGluZyAtLT4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgCiAg
ICAgICAgaHJlZj0iJHtiYXNlfS9saWIvY3NzL3plbmJ1cm4uY3NzIj4KICAgIDwhLS0gSW5jbHVk
ZSB0aGUgYXBwcm9wcmlhdGUgcHJpbnQgc3R5bGVzaGVldCAtLT4KICA8L2hlYWQ+CiAgPGJvZHk+
CiAgICA8ZGl2IGNsYXNzPSJyZXZlYWwiPgogICAgICAlIGZvciBzbGlkZSBpbiBzbGlkZXM6CiAg
ICAgIDxkaXYgY2xhc3M9InNsaWRlcyI+CiAgICA8c2VjdGlvbj4KICAgICAgJSBpZiBsZW4oc2xp
ZGUpID09IDE6CiAgICAgICR7c2xpZGVbMF19CiAgICAgICUgZWxzZToKICAgICAgICAgICAgJSBm
b3Igc2VjdGlvbiBpbiBzbGlkZToKICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICR7c2VjdGlv
bn0KICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICUgZW5kZm9yCiAgICAgICUgZW5kaWYK
ICAgIDwvc2VjdGlvbj4KICAgICAgPC9kaXY+CiAgICAgICUgZW5kZm9yCiAgICA8L2Rpdj4KICAg
IDxzY3JpcHQgCiAgICAgICAgc3JjPSIke2Jhc2V9L2xpYi9qcy9oZWFkLm1pbi5qcyI+PC9zY3Jp
cHQ+CiAgICA8c2NyaXB0IAogICAgICAgIHNyYz0iJHtiYXNlfS9qcy9yZXZlYWwubWluLmpzIj48
L3NjcmlwdD4KICAgIDxzY3JpcHQ+Ci8vIEZ1bGwgbGlzdCBvZiBjb25maWd1cmF0aW9uIG9wdGlv
bnMgYXZhaWxhYmxlIGhlcmU6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oYWtpbWVsL3JldmVhbC5q
cyNjb25maWd1cmF0aW9uClJldmVhbC5pbml0aWFsaXplKHsKICAgIGNvbnRyb2xzOiB0cnVlLAog
ICAgcHJvZ3Jlc3M6IHRydWUsCiAgICBoaXN0b3J5OiB0cnVlLAoKICAgIHRoZW1lOiBSZXZlYWwu
Z2V0UXVlcnlIYXNoKCkudGhlbWUsIC8vIGF2YWlsYWJsZSB0aGVtZXMgYXJlIGluIC9jc3MvdGhl
bWUKICAgIHRyYW5zaXRpb246IFJldmVhbC5nZXRRdWVyeUhhc2goKS50cmFuc2l0aW9uIHx8ICdk
ZWZhdWx0JywgLy8gbm9uZS9mYWRlL3NsaWRlL2NvbnZleC9jb25jYXZlL3pvb20KCiAgICAvLyBQ
YXJhbGxheCBzY3JvbGxpbmcKICAgIC8vIHBhcmFsbGF4QmFja2dyb3VuZEltYWdlOiAnaHR0cHM6
Ly9zMy5hbWF6b25hd3MuY29tL2hha2ltLXN0YXRpYy9yZXZlYWwtanMvcmV2ZWFsLXBhcmFsbGF4
LTEuanBnJywKICAgIC8vIHBhcmFsbGF4QmFja2dyb3VuZFNpemU6ICcyMTAwcHggOTAwcHgnLAoK
ICAgIC8vIE9wdGlvbmFsIGxpYnJhcmllcyB1c2VkIHRvIGV4dGVuZCBvbiByZXZlYWwuanMKICAg
IGRlcGVuZGVuY2llczogWwogICAgeyBzcmM6ICcke2Jhc2V9L2xpYi9qcy9jbGFzc0xpc3QuanMn
LCBjb25kaXRpb246IGZ1bmN0aW9uKCkgeyByZXR1cm4gIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0
OyB9IH0sCiAgICB7IHNyYzogJyR7YmFzZX0vcGx1Z2luL21hcmtkb3duL21hcmtlZC5qcycKICAg
ICwgY29uZGl0aW9uOiBmdW5jdGlvbigpIHsgcmV0dXJuICEhZG9jdW1lbnQucXVlcnlTZWxlY3Rv
ciggJ1tkYXRhLW1hcmtkb3duXScgKTsgfSB9LAogICAgeyBzcmM6ICcke2Jhc2V9L3BsdWdpbi9o
aWdobGlnaHQvaGlnaGxpZ2h0LmpzJywgYXN5bmM6IHRydWUsIGNhbGxiYWNrOiBmdW5jdGlvbigp
IHsgaGxqcy5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkKCk7IH0gfSwKICAgIHsgc3JjOiAnJHtiYXNl
fS9wbHVnaW4vem9vbS1qcy96b29tLmpzJywgYXN5bmM6IHRydWUsIGNvbmRpdGlvbjogZnVuY3Rp
b24oKSB7IHJldHVybiAhIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0OyB9IH0sCiAgICB7IHNyYzog
JyR7YmFzZX0vcGx1Z2luL25vdGVzL25vdGVzLmpzJywgYXN5bmM6IHRydWUsIGNvbmRpdGlvbjog
ZnVuY3Rpb24oKSB7IHJldHVybiAhIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0OyB9IH0KICAgIF0K
fSk7CiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K
'''
template = Template(base64.b64decode(basehtml))

def bsjoin(l):
    bs = BeautifulSoup()
    for i in l: bs.append(i)
    return bs

def split(l, f):
    m = []
    for i in l:
        if f(i):
            if m: yield m
            m = []
        m.append(i)
    yield m

def proc_section(bs):
    if hasattr(bs[0], 'name') and bs[0].name == 'hr': bs = bs[1:]
    return bsjoin(bs)

def split_section(bs):
    f = lambda i: hasattr(i, 'name') and (i.name.startswith('h') or i.name == 'hr')
    return map(proc_section, list(split(bs, f)))

def split_slide(bs):
    f = lambda i: hasattr(i, 'name') and i.name == 'h1'
    return map(split_section, list(split(bs, f)))

def translate(src):
    dst = path.splitext(src)[0] + '.html'
    md = subprocess.check_output(['markdown', src]).decode('utf-8')
    slides = split_slide(BeautifulSoup(md))
    html = template.render(
        slides=slides,
        title=optdict.get('-t') or path.splitext(path.basename(src))[0],
        base=optdict.get('-b') or DEFAULT_CDN).encode('utf-8')
    if '-c' in optdict:
        sys.stdout.write(html)
    else:
        with open(dst, 'w') as fo: fo.write(html)

def main():
    '''
    md2slide v1.0
    -b  ~ reveal url base
    -c  ~ stdout
    -t  ~ title
    -h  ~ help
    Usgae:
    $ python md2slide.py XX0.md XX1.md ...
    '''
    global optdict
    optlist, args = getopt.getopt(sys.argv[1:], 'b:cht:')
    optdict = dict(optlist)
    if '-h' in optdict or not args:
        print main.__doc__
        return
    map(translate, args)


if __name__ == '__main__': main()
