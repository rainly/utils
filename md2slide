#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@date: 2012-09-11
@author: shell.xu
@license:

Copyright (C) 2012 Shell Xu <shell909090@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
   
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
   
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@comment:

This program is used to translate markdown file to html5 slide. It is based on [reveal](https://github.com/hakimel/reveal.js). This program is followed upstream, source is released by MIT lisence, please check source code for more infomation.

程序可以将markdown文档转换为html5的演示文档。程序基于[reveal](https://github.com/hakimel/reveal.js)项目完成。项目遵从上游，以MIT授权发布。具体情况请阅读源码。

需要事先安装: markdown: stable 1.0.1
    Text-to-HTML conversion tool
    http://daringfireball.net/projects/markdown/

'''
import os, re, sys, base64, pprint, getopt, subprocess
from mako.template import Template
from BeautifulSoup import BeautifulSoup
from os import path

# http://cdn.bootcss.com/reveal.js/2.6.2
DEFAULT_CDN = 'http://xuzhixiang.u.qiniudn.com/reveal/2.6.2'

basehtml='''
PCFkb2N0eXBlIGh0bWw+ICAKPGh0bWwgbGFuZz0iZW4iPgogIDxoZWFkPgogICAgPHRpdGxlPiR7dGl0bGV9PC90aXRsZT4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiIC8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1zdGF0dXMtYmFyLXN0eWxlIiBjb250ZW50PSJibGFjay10cmFuc2x1Y2VudCIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgCiAgICAgICAgaHJlZj0iaHR0cDovL2Nkbi5zdGF0aWNmaWxlLm9yZy9yZXZlYWwuanMvMi42LjIvY3NzL3JldmVhbC5jc3MiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiAKICAgICAgICBocmVmPSJodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3JldmVhbC5qcy8yLjYuMi9jc3MvdGhlbWUvZGVmYXVsdC5jc3MiIGlkPSJ0aGVtZSI+CiAgICA8IS0tIEZvciBzeW50YXggaGlnaGxpZ2h0aW5nIC0tPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiAKICAgICAgICBocmVmPSJodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3JldmVhbC5qcy8yLjYuMi9saWIvY3NzL3plbmJ1cm4uY3NzIj4KICAgIDwhLS0gSW5jbHVkZSB0aGUgYXBwcm9wcmlhdGUgcHJpbnQgc3R5bGVzaGVldCAtLT4KICA8L2hlYWQ+CiAgPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJyZXZlYWwiPgogICAgICAlIGZvciBzbGlkZSBpbiBzbGlkZXM6CiAgICAgIDxkaXYgY2xhc3M9InNsaWRlcyI+CiAgICA8c2VjdGlvbj4KICAgICAgJSBpZiBsZW4oc2xpZGUpID09IDE6CiAgICAgICR7c2xpZGVbMF19CiAgICAgICUgZWxzZToKICAgICAgICAgICAgJSBmb3Igc2VjdGlvbiBpbiBzbGlkZToKICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICR7c2VjdGlvbn0KICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICUgZW5kZm9yCiAgICAgICUgZW5kaWYKICAgIDwvc2VjdGlvbj4KICAgICAgPC9kaXY+CiAgICAgICUgZW5kZm9yCiAgICA8L2Rpdj4KICAgIDxzY3JpcHQgCiAgICAgICAgc3JjPSJodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3JldmVhbC5qcy8yLjYuMi9saWIvanMvaGVhZC5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCAKICAgICAgICBzcmM9Imh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvcmV2ZWFsLmpzLzIuNi4yL2pzL3JldmVhbC5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdD4KLy8gRnVsbCBsaXN0IG9mIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhdmFpbGFibGUgaGVyZToKLy8gaHR0cHM6Ly9naXRodWIuY29tL2hha2ltZWwvcmV2ZWFsLmpzI2NvbmZpZ3VyYXRpb24KUmV2ZWFsLmluaXRpYWxpemUoewogICAgY29udHJvbHM6IHRydWUsCiAgICBwcm9ncmVzczogdHJ1ZSwKICAgIGhpc3Rvcnk6IHRydWUsCgogICAgdGhlbWU6IFJldmVhbC5nZXRRdWVyeUhhc2goKS50aGVtZSwgLy8gYXZhaWxhYmxlIHRoZW1lcyBhcmUgaW4gL2Nzcy90aGVtZQogICAgdHJhbnNpdGlvbjogUmV2ZWFsLmdldFF1ZXJ5SGFzaCgpLnRyYW5zaXRpb24gfHwgJ2RlZmF1bHQnLCAvLyBub25lL2ZhZGUvc2xpZGUvY29udmV4L2NvbmNhdmUvem9vbQoKICAgIC8vIFBhcmFsbGF4IHNjcm9sbGluZwogICAgLy8gcGFyYWxsYXhCYWNrZ3JvdW5kSW1hZ2U6ICdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGFraW0tc3RhdGljL3JldmVhbC1qcy9yZXZlYWwtcGFyYWxsYXgtMS5qcGcnLAogICAgLy8gcGFyYWxsYXhCYWNrZ3JvdW5kU2l6ZTogJzIxMDBweCA5MDBweCcsCgogICAgLy8gT3B0aW9uYWwgbGlicmFyaWVzIHVzZWQgdG8gZXh0ZW5kIG9uIHJldmVhbC5qcwogICAgZGVwZW5kZW5jaWVzOiBbCiAgICB7IHNyYzogJ2h0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvcmV2ZWFsLmpzLzIuNi4yL2xpYi9qcy9jbGFzc0xpc3QuanMnLCBjb25kaXRpb246IGZ1bmN0aW9uKCkgeyByZXR1cm4gIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0OyB9IH0sCiAgICB7IHNyYzogJ2h0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvcmV2ZWFsLmpzLzIuNi4yL3BsdWdpbi9tYXJrZG93bi9tYXJrZWQuanMnCiAgICAsIGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7IHJldHVybiAhIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICdbZGF0YS1tYXJrZG93bl0nICk7IH0gfSwKICAgIHsgc3JjOiAnaHR0cDovL2Nkbi5zdGF0aWNmaWxlLm9yZy9yZXZlYWwuanMvMi42LjIvcGx1Z2luL2hpZ2hsaWdodC9oaWdobGlnaHQuanMnLCBhc3luYzogdHJ1ZSwgY2FsbGJhY2s6IGZ1bmN0aW9uKCkgeyBobGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTsgfSB9LAogICAgeyBzcmM6ICdodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3JldmVhbC5qcy8yLjYuMi9wbHVnaW4vem9vbS1qcy96b29tLmpzJywgYXN5bmM6IHRydWUsIGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7IHJldHVybiAhIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0OyB9IH0sCiAgICB7IHNyYzogJ2h0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvcmV2ZWFsLmpzLzIuNi4yL3BsdWdpbi9ub3Rlcy9ub3Rlcy5qcycsIGFzeW5jOiB0cnVlLCBjb25kaXRpb246IGZ1bmN0aW9uKCkgeyByZXR1cm4gISFkb2N1bWVudC5ib2R5LmNsYXNzTGlzdDsgfSB9CiAgICBdCn0pOwogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
'''
template = Template(base64.b64decode(basehtml))

def bsjoin(l):
    bs = BeautifulSoup()
    for i in l: bs.append(i)
    return bs

def split(l, f):
    m = []
    for i in l:
        if f(i):
            if m: yield m
            m = []
        m.append(i)
    yield m

def proc_section(bs):
    if hasattr(bs[0], 'name') and bs[0].name == 'hr': bs = bs[1:]
    return bsjoin(bs)

def split_section(bs):
    f = lambda i: hasattr(i, 'name') and (i.name.startswith('h') or i.name == 'hr')
    return map(proc_section, list(split(bs, f)))

def split_slide(bs):
    f = lambda i: hasattr(i, 'name') and i.name == 'h1'
    return map(split_section, list(split(bs, f)))

def translate(src):
    dst = path.splitext(src)[0] + '.html'
    md = subprocess.check_output(['markdown', src]).decode('utf-8')
    slides = split_slide(BeautifulSoup(md))
    html = template.render(
        slides=slides,
        title=optdict.get('-t') or path.splitext(path.basename(src))[0],
        base=optdict.get('-b') or DEFAULT_CDN).encode('utf-8')
    if '-c' in optdict:
        sys.stdout.write(html)
    else:
        with open(dst, 'w') as fo: fo.write(html)

def main():
    '''
    md2slide v1.0
    -b  ~ reveal url base
    -c  ~ stdout
    -t  ~ title
    -h  ~ help
    Usgae:
    $ python md2slide.py XX0.md XX1.md ...
    '''
    global optdict
    optlist, args = getopt.getopt(sys.argv[1:], 'b:cht:')
    optdict = dict(optlist)
    if '-h' in optdict or not args:
        print main.__doc__
        return
    map(translate, args)


if __name__ == '__main__': main()
